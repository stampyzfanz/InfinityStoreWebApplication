@page
@model InfinityWebApplication.Pages.Products.DetailsModel
@using InfinityWebApplication.Util;

@{
    ViewData["Title"] = "Details";
}

<p class="cat-link"><i>@Html.DisplayFor(model => model.Product!.Category)</i></p>
<div class="flex-container">
    <div class="left carousel slide" id="myCarousel" data-ride="carousel">
        <div class="carousel-inner">
            <a class="left carousel-control" href="#myCarousel" data-slide="prev">
            <span class="glyphicon glyphicon-chevron-left"></span>
            <span class="sr-only black">Previous</span>
            </a>
            <a class="right carousel-control" href="#myCarousel" data-slide="next">
            <span class="glyphicon glyphicon-chevron-right"></span>
            <span class="sr-only black">Next</span>
            </a>
            @* Add each of the images to the slideshow *@
            @foreach (var (imageUrl, i) in Model.ImageUrls.Select((ImageUrl, i) => (ImageUrl, i))) {
                <div class="item @(i == 0 ? "active" : null)">
                    <img src="@imageUrl" style="width: 100%;">
                </div>
            }
        </div>
     
    
    </div>
    <div class="right">
        <h1>@Html.DisplayFor(model => model.Product!.Name)</h1>
        <hr>
        <h3><b>@Html.DisplayFor(model => model.Product!.SalePrice)</b></h3> 
        <hr>
        <div style="width: 100%;">
            <div style="width:40%; float: left;">
                <label for="store-choice" class="label-text">Choose a store:</label>
            </div>
            <div style="width:60%; float: left; text-align: right;">
                 <input list="stores" id="store-choice" name="store-choice" class="textInput" value=""  style="margin-bottom: 20px; margin-top: 10px;" class="input">
            </div>
           
            <datalist id="stores" >
            @* Allow user to choose which store the product will be available at *@
            @foreach (var Store in Model.Stores) {
                @if (Model.StoreToStock[Store.Title] != 0)
                {
                    <option value="@Store.Title"></option>
                }
            }
            </datalist>
            <br>

            <div style="width:40%; float: left;">
                <label for="payment-information" class="label-text">Payment information:</label>
            </div>
            <div style="width:60%; float: left; text-align: right;">
                <input type="text" name="payment-information" id="payment-information" style="margin-bottom: 20px;" class="input">
            </div>
            <br>
            <div style="width:40%; float: left;">
                <label for="payment-information" class="label-text">Quantity:</label>
            </div>
            <div style="width:60%; float: left; text-align: right;">
                <input id="quantity" type="number" value="1" min="1" max="10" class="input">
            </div>
        </div>
        <br>
        <hr>
        <button class="button-design" onclick="purchaseProduct();" id="purchase-product">
            <p class="left">Purchase product</p>
        </button> 
    </div>
</div>
<hr>
<br>
<p>@Html.Raw(Model.Product!.Description)</p>

<br>
<br>
<br>
<br>

@section scripts{
<script defer="defer">
    const storeToStock = @Html.Raw(Model.StoreToStock.ToJsonString());

    // Ensure that the quantity is between the mininum and maximum value
    function validateInputRange(isNewStore) {
        const quantity = $("#quantity");
        if (isNewStore === true) quantity.val(1)
        else if (parseInt(quantity.val()) >= quantity.attr("max")) quantity.val(quantity.attr("max"));
        else if (parseInt(quantity.val()) < 0) quantity.val(0);
    }
    $("#quantity").on("keyup", validateInputRange);


    async function purchaseProduct() {
        const quantity = 6;
        const productId = @Model.Product.ProductId;

        // to find store title
        let optionFound = false;
        const storeChoice = document.getElementById("store-choice");
        let datalist = storeChoice.list;

        // Determine whether an option exists with the current value of the input.
        for (let i = 0; i < datalist.options.length; i++) {
            if (storeChoice.value == datalist.options[i].value) {
                optionFound = true;
                break;
            }
        }

        if (optionFound) {
            storeTitle = storeChoice.value;
        } else {
            storeChoice.setCustomValidity('Please select a valid value.');
            storeChoice.reportValidity();
            return;
        }

        const responce = await (await fetch('/api/purchaseProduct', {
            method: 'POST',
            headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(
                {
                    productId: @Model.Product.ProductId, 
                    storeTitle: storeTitle,
                    quantity: parseInt($('#quantity').val()),
                    paymentInfo: $('#payment-information').val()
                }
            )
        })).text();

        if (responce.startsWith("\"Success")) {
            storeToStock[storeChoice.value] = parseInt(responce.replace( /\D+/g, ""));
            onStoreChange(true);
        } else {
            const purchaseProduct = document.getElementById("purchase-product");
            storeChoice.setCustomValidity(responce);
            storeChoice.reportValidity();
        }

        console.log(responce);
    }


    function onStoreChange(ifJustPurchased) {
        let optionFound = false;
        const storeChoice = $("#store-choice")
        const datalist = storeChoice[0].list;
        // Determine whether an option exists with the current value of the input.
        for (let i = 0; i < datalist.options.length; i++) {
            if (storeChoice[0].value == datalist.options[i].value) {
                optionFound = true;
                break;
            }
        }
        // use the setCustomValidity function of the Validation API
        // to provide an user feedback if the value does not exist in the datalist
        if (optionFound) {
            // Update quantity input with maximum quantity and 
            if (storeToStock[storeChoice[0].value] === 0) {
                // Invalid store
                $('#quantity')[0].disabled = true;
                if (ifJustPurchased === true) {
                    storeChoice[0].setCustomValidity('Your purchase was successful, but this store doesn\'t have this product in stock anymore, so you must change the store for your next purchase.');
                } else {
                    storeChoice[0].setCustomValidity('Sorry this store doesn\'t have this product in stock.');
                }
            } else {
                // allow user to use it
                $("#quantity").attr({
                    "max" : storeToStock[storeChoice[0].value]
                });
                storeChoice[0].setCustomValidity('');
                $('#quantity')[0].disabled = false;
            }
            validateInputRange(true);
        } else {
            storeChoice[0].setCustomValidity('Please select a valid value.');
        }
        storeChoice[0].reportValidity();
    }
    $("#store-choice").on('change', onStoreChange);

    // if the web browser autocompletes the input
    if ($("#store-choice").val() !== "" && $("#store-choice").val() !== undefined) {
        onStoreChange();
    }
</script>
}
